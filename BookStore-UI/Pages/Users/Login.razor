@page "/login"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo; 
@inject NavigationManager _navMan; 

<div class="card">
    <h3 class="card-title">Login</h3>
    @if (response ==  false)
    {
        <div class="alert alert-danger">
            <p>Something went wrong with the Login attempt</p>
        </div>
    }
    <div class="card-body">
        @*Binding to UserModel.cs -> RegistrationModel.*@
        <EditForm Model="Model" 
                  OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email Address</label>
                @*what part of model to bind this to?*@
                <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" aria-describedby="emailHelp"></InputText>
                <small id="emailHelp" class="form-text text-muted">Some cool help text</small>
                <input type="color" class="form-control form-control-color" id="exampleColorInput" value="#563d7c" title="Choose your color">
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                @*what part of model to bind this to?*@
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password"></InputText>
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Login</button>

        </EditForm>
    </div>
</div>

@code {
    //Declare global to the entire view
    //define the LoginModel (which is in namepace BookStore_UI.Models)
    private LoginModel Model = new LoginModel();
    private bool response = true;

    /// <summary>
    /// What to do when somone registers (athenticate service and call API)
    /// </summary>
    /// <returns></returns>
    private async Task HandleLogin()
    {
        response = await _authRepo.Login(Model);
        if(response == true)
        {
            _navMan.NavigateTo("/");
        }
    }
}
